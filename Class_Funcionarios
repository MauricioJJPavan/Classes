import csv
import locale
from statistics import mean, stdev

# Definindo a localização para o Brasil
locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')

# Definição da classe ClsFuncionario
class ClsFuncionario:
    
    # Construtor da classe para inicializar os atributos
    def __init__(self, nome, cargo, salario):
        self.nome = nome
        self.cargo = cargo
        self.salario = salario

    # Método para imprimir informações sobre o funcionário com índice
    def mostrar_informacoes_com_indice(self, indice):
        salario_formatado = locale.currency(self.salario, grouping=True)
        print(f"Índice {indice}: Funcionário(a) {self.nome} tem salário de {salario_formatado} e o cargo é {self.cargo}")

    # Método para atualizar o salário do funcionário
    def atualizar_salario(self, novo_salario):
        self.salario = novo_salario

    # Método para atualizar o cargo do funcionário
    def atualizar_cargo(self, novo_cargo):
        self.cargo = novo_cargo

# Lista para armazenar os objetos ClsFuncionario
lst_funcionarios = []

# Lendo o arquivo CSV chamado 'csv_func.csv' com separador ';'
with open('csv_func.csv', newline='', encoding='utf-8') as csv_file:
    # Criando um leitor CSV personalizado com separador ';'
    csv_reader = csv.reader(csv_file, delimiter=';')
    
    # Pular o cabeçalho
    next(csv_reader)
    
    # Iterando sobre cada linha no arquivo CSV
    for row in csv_reader:
        # Obtendo os valores de cada coluna
        nome, cargo, salario = row
        salario = float(salario)
        
        # Criando um objeto da classe ClsFuncionario com base nos valores e adicionando à lista
        funcionario = ClsFuncionario(nome, cargo, salario)
        lst_funcionarios.append(funcionario)
        
        
        

# Imprimindo informações sobre os funcionários usando o método mostrar_informacoes com índice
for indice, funcionario in enumerate(lst_funcionarios):
    # Adiciona 1 ao índice para começar a contagem a partir de 1 em vez de 0
    indice += 1
    funcionario.mostrar_informacoes_com_indice(indice)

    
# Calculando estatísticas de salários
salarios = [funcionario.salario for funcionario in lst_funcionarios]
salario_minimo = locale.currency(min(salarios), grouping=True)
salario_maximo = locale.currency(max(salarios), grouping=True)
salario_medio = locale.currency(mean(salarios), grouping=True)
desvio_padrao = locale.currency(stdev(salarios), grouping=True)

# Exibindo as estatísticas de salários
print("\nSalário Mínimo:", salario_minimo)
print("Salário Máximo:", salario_maximo)
print("Salário Médio:", salario_medio)
print("Desvio Padrão:", desvio_padrao)

# Ordenar a lista de funcionários pelo salário em ordem decrescente
lst_funcionarios.sort(key=lambda x: x.salario, reverse=True)

# Obter os 10 funcionários com os maiores salários
top_10_maiores_salarios = lst_funcionarios[:10]

# Exibir informações dos 10 funcionários com os maiores salários
print("\nOs 10 maiores salários:")
for indice, funcionario in enumerate(top_10_maiores_salarios):
    # Adiciona 1 ao índice para começar a contagem a partir de 1 em vez de 0
    indice += 1
    funcionario.mostrar_informacoes_com_indice(indice)

# Ordenar a lista de funcionários pelo salário em ordem crescente (para obter os menores salários)
lst_funcionarios.sort(key=lambda x: x.salario)

# Obter os 10 funcionários com os menores salários
top_10_menores_salarios = lst_funcionarios[:10]

# Exibir informações dos 10 funcionários com os menores salários
print("\nOs 10 menores salários:")
for indice, funcionario in enumerate(top_10_menores_salarios):
    # Adiciona 1 ao índice para começar a contagem a partir de 1 em vez de 0
    indice += 1
    funcionario.mostrar_informacoes_com_indice(indice)    

# Função para obter informações de um funcionário com base no índice inserido pelo usuário
def obter_funcionario_por_indice(indice_desejado):
    # Verificar se o índice é válido
    if indice_desejado >= 1 and indice_desejado <= len(lst_funcionarios):
        funcionario_desejado = lst_funcionarios[indice_desejado - 1]
        # Imprimir as informações do funcionário com índice
        funcionario_desejado.mostrar_informacoes_com_indice(indice_desejado)
        return funcionario_desejado
    else:
        print(f"Índice {indice_desejado} fora do intervalo válido.")
        return None

# Função para atualizar o salário e o cargo de um funcionário
def atualizar_salario_e_cargo(funcionario):
    if funcionario:
        # Solicitar o novo salário
        novo_salario = float(input("Insira o novo salário: "))
        funcionario.atualizar_salario(novo_salario)

        # Solicitar o novo cargo
        novo_cargo = input("Insira o novo cargo: ").upper()
        funcionario.atualizar_cargo(novo_cargo)

        # Imprimir informações atualizadas
        funcionario.mostrar_informacoes_com_indice(lst_funcionarios.index(funcionario) + 1)

        # Salvar as informações atualizadas no arquivo original
        with open('csv_func.csv', mode='w', newline='', encoding='utf-8') as csv_file:
            csv_writer = csv.writer(csv_file, delimiter=';')

            # Escrever o cabeçalho
            csv_writer.writerow(['Nome', 'Cargo', 'Salario'])

            # Escrever as informações dos funcionários
            for func in lst_funcionarios:
                csv_writer.writerow([func.nome, func.cargo, func.salario])

        print("As informações foram salvas no arquivo CSV original.")
    else:
        print("Funcionário não encontrado.")

# Loop principal com o menu de opções
while True:
    print("\nMENU DE OPÇÕES:")
    print("0 - SAIR")
    print("1 - ATUALIZAR INFORMAÇÕES SOBRE FUNCIONÁRIO")

    escolha = input("Escolha uma opção: ")

    if escolha == '0':
        # Opção 0: SAIR
        print("Saindo do programa.")
        break
    elif escolha == '1':
        # Opção 1: ATUALIZAR INFORMAÇÕES SOBRE FUNCIONÁRIO
        indice_desejado = int(input("\nInsira o número de índice do funcionário para atualizar: "))
        funcionario_desejado = obter_funcionario_por_indice(indice_desejado)
        atualizar_salario_e_cargo(funcionario_desejado)
    else:
        print("Opção inválida. Escolha novamente.")
