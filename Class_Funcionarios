import csv
import locale
from statistics import mean, stdev

# Definindo a localização para o Brasil
locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')

# Definição da classe ClsFuncionario
class ClsFuncionario:
    
    # Construtor da classe para inicializar os atributos
    def __init__(self, nome, salario, cargo):
        self.nome = nome
        self.salario = salario
        self.cargo = cargo

    # Método para imprimir informações sobre o funcionário com índice
    def mostrar_informacoes_com_indice(self, indice):
        salario_formatado = locale.currency(self.salario, grouping=True)
        print(f"Índice {indice}: Funcionário(a) {self.nome} tem salário de {salario_formatado} e o cargo é {self.cargo}")

# Lista para armazenar os objetos ClsFuncionario
lst_funcionarios = []

# Lendo o arquivo CSV chamado 'csv_func.csv' com separador ';'
with open('csv_func.csv', newline='', encoding='utf-8') as csv_file:
    # Criando um leitor CSV personalizado com separador ';'
    csv_reader = csv.reader(csv_file, delimiter=';')
    
    # Pular o cabeçalho
    next(csv_reader)
    
    # Iterando sobre cada linha no arquivo CSV
    for row in csv_reader:
        # Obtendo os valores de cada coluna
        nome, cargo, salario = row
        salario = float(salario)
        
        # Criando um objeto da classe ClsFuncionario com base nos valores e adicionando à lista
        funcionario = ClsFuncionario(nome, salario, cargo)
        lst_funcionarios.append(funcionario)

# Função para obter informações de um funcionário com base no índice inserido pelo usuário
def obter_funcionario_por_indice():
    # Solicitar ao usuário um número de índice
    indice_desejado = int(input("\nInsira o número de índice do funcionário desejado: \n"))
    
    # Verificar se o índice é válido
    if indice_desejado >= 1 and indice_desejado <= len(lst_funcionarios):
        funcionario_desejado = lst_funcionarios[indice_desejado - 1]
        # Imprimir as informações do funcionário com índice
        funcionario_desejado.mostrar_informacoes_com_indice(indice_desejado)
    else:
        print(f"Índice {indice_desejado} fora do intervalo válido.")

# Imprimindo informações sobre os funcionários usando o método mostrar_informacoes com índice
for indice, funcionario in enumerate(lst_funcionarios):
    # Adiciona 1 ao índice para começar a contagem a partir de 1 em vez de 0
    indice += 1
    funcionario.mostrar_informacoes_com_indice(indice)

# Chamar a função para obter um funcionário por índice
obter_funcionario_por_indice()

# Calculando estatísticas de salários
salarios = [funcionario.salario for funcionario in lst_funcionarios]
salario_minimo = locale.currency(min(salarios), grouping=True)
salario_maximo = locale.currency(max(salarios), grouping=True)
salario_medio = locale.currency(mean(salarios), grouping=True)
desvio_padrao = locale.currency(stdev(salarios), grouping=True)

# Exibindo as estatísticas de salários
print("\nSalário Mínimo:", salario_minimo)
print("Salário Máximo:", salario_maximo)
print("Salário Médio:", salario_medio)
print("Desvio Padrão:", desvio_padrao)

# Ordenar a lista de funcionários pelo salário em ordem decrescente
lst_funcionarios.sort(key=lambda x: x.salario, reverse=True)

# Obter os 10 funcionários com os maiores salários
top_10_maiores_salarios = lst_funcionarios[:10]

# Exibir informações dos 10 funcionários com os maiores salários
print("\nOs 10 maiores salários:")
for indice, funcionario in enumerate(top_10_maiores_salarios):
    # Adiciona 1 ao índice para começar a contagem a partir de 1 em vez de 0
    indice += 1
    funcionario.mostrar_informacoes_com_indice(indice)

# Ordenar a lista de funcionários pelo salário em ordem crescente (para obter os menores salários)
lst_funcionarios.sort(key=lambda x: x.salario)

# Obter os 10 funcionários com os menores salários
top_10_menores_salarios = lst_funcionarios[:10]

# Exibir informações dos 10 funcionários com os menores salários
print("\nOs 10 menores salários:")
for indice, funcionario in enumerate(top_10_menores_salarios):
    # Adiciona 1 ao índice para começar a contagem a partir de 1 em vez de 0
    indice += 1
    funcionario.mostrar_informacoes_com_indice(indice)




# Função para verificar se o funcionário no índice especificado tem o atributo "nome"
def verificar_atributo_nome(indice):
    if indice >= 1 and indice <= len(lst_funcionarios):
        funcionario_desejado = lst_funcionarios[indice - 1]
        if hasattr(funcionario_desejado, "nome"):
            print(f"Funcionário no índice {indice} tem o atributo 'nome'.")
        else:
            print(f"Funcionário no índice {indice} não tem o atributo 'nome'.")
    else:
        print(f"Índice {indice} fora do intervalo válido.")

# Função para verificar se o funcionário no índice especificado tem o atributo "salario"
def verificar_atributo_salario(indice):
    if indice >= 1 and indice <= len(lst_funcionarios):
        funcionario_desejado = lst_funcionarios[indice - 1]
        if hasattr(funcionario_desejado, "salario"):
            print(f"Funcionário no índice {indice} tem o atributo 'salario'.")
        else:
            print(f"Funcionário no índice {indice} não tem o atributo 'salario'.")
    else:
        print(f"Índice {indice} fora do intervalo válido.")

# Função para definir o atributo "salario" do funcionário no índice especificado
def definir_atributo_salario(indice, novo_salario):
    if indice >= 1 and indice <= len(lst_funcionarios):
        funcionario_desejado = lst_funcionarios[indice - 1]
        setattr(funcionario_desejado, "salario", novo_salario)
        print(f"Salário do funcionário no índice {indice} foi definido como {novo_salario}.")
    else:
        print(f"Índice {indice} fora do intervalo válido.")

# Função para verificar o valor do atributo "salario" do funcionário no índice especificado
def verificar_valor_atributo_salario(indice):
    if indice >= 1 and indice <= len(lst_funcionarios):
        funcionario_desejado = lst_funcionarios[indice - 1]
        salario = getattr(funcionario_desejado, "salario", None)
        if salario is not None:
            print(f"Salário do funcionário no índice {indice} é {salario}.")
        else:
            print(f"Funcionário no índice {indice} não tem o atributo 'salario'.")
    else:
        print(f"Índice {indice} fora do intervalo válido.")

# Função para excluir o atributo "salario" do funcionário no índice especificado
def excluir_atributo_salario(indice):
    if indice >= 1 and indice <= len(lst_funcionarios):
        funcionario_desejado = lst_funcionarios[indice - 1]
        if hasattr(funcionario_desejado, "salario"):
            delattr(funcionario_desejado, "salario")
            print(f"Atributo 'salario' do funcionário no índice {indice} foi excluído.")
        else:
            print(f"Funcionário no índice {indice} não tem o atributo 'salario'.")
    else:
        print(f"Índice {indice} fora do intervalo válido.")

# Função para exibir os dados completos do funcionário
def exibir_dados_completos(indice):
    if indice >= 1 and indice <= len(lst_funcionarios):
        funcionario_desejado = lst_funcionarios[indice - 1]
        funcionario_desejado.mostrar_informacoes_com_indice(indice)
    else:
        print(f"Índice {indice} fora do intervalo válido.")

# Função para exibir os dados completos do funcionário
def exibir_dados_completos(indice):
    if indice >= 1 and indice <= len(lst_funcionarios):
        funcionario_desejado = lst_funcionarios[indice - 1]
        if hasattr(funcionario_desejado, "salario"):
            funcionario_desejado.mostrar_informacoes_com_indice(indice)
        else:
            print(f"Índice {indice}: Funcionário(a) {funcionario_desejado.nome} não possui o atributo 'salario'.")
    else:
        print(f"Índice {indice} fora do intervalo válido.")

# Função para definir o atributo 'salario'
def definir_atributo_salario(indice, novo_salario):
    if indice >= 1 and indice <= len(lst_funcionarios):
        funcionario_desejado = lst_funcionarios[indice - 1]
        funcionario_desejado.salario = novo_salario
        print(f"Salário do funcionário no índice {indice} foi definido como {novo_salario:.2f}.")
    else:
        print(f"Índice {indice} fora do intervalo válido.")

        
        
# Função para verificar se o atributo 'cargo' existe
def verificar_atributo_cargo(indice):
    if indice >= 1 and indice <= len(lst_funcionarios):
        funcionario_desejado = lst_funcionarios[indice - 1]
        if hasattr(funcionario_desejado, "cargo"):
            print(f"Funcionário no índice {indice} tem o atributo 'cargo'.")
        else:
            print(f"Funcionário no índice {indice} não tem o atributo 'cargo'.")
    else:
        print(f"Índice {indice} fora do intervalo válido.")

# Função para definir o atributo 'cargo'
def definir_atributo_cargo(indice, novo_cargo):
    if indice >= 1 and indice <= len(lst_funcionarios):
        funcionario_desejado = lst_funcionarios[indice - 1]
        funcionario_desejado.cargo = novo_cargo
        print(f"Cargo do funcionário no índice {indice} foi definido como '{novo_cargo}'.")
    else:
        print(f"Índice {indice} fora do intervalo válido.")

# Chamar as funções para testar os atributos
indice_desejado = int(input("Insira o número de índice do funcionário desejado: "))

exibir_dados_completos(indice_desejado)

verificar_atributo_nome(indice_desejado)
verificar_atributo_salario(indice_desejado)
verificar_atributo_cargo(indice_desejado)

novo_salario = float(input("Insira o novo salário: "))
definir_atributo_salario(indice_desejado, novo_salario)

novo_cargo = input("Insira o novo cargo: ")
definir_atributo_cargo(indice_desejado, novo_cargo)

verificar_valor_atributo_salario(indice_desejado)
verificar_atributo_cargo(indice_desejado)

#excluir_atributo_salario(indice_desejado)
exibir_dados_completos(indice_desejado)
verificar_atributo_salario(indice_desejado)
